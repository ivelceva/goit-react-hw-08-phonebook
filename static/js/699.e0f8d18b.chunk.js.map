{"version":3,"file":"static/js/699.e0f8d18b.chunk.js","mappings":"yRA8FA,EAtFqB,WACnB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACN,IAAK,WACHC,EAAQQ,GACR,MACF,IAAK,YACHN,EAASM,GACT,MACF,IAAK,eACHJ,EAAYI,GAIjB,EAEKC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAASC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACjCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACE,kBAAMG,UAAWC,EAAAA,EAAAA,KAAUC,SAXR,SAAAf,GACnBA,EAAEgB,iBAEFb,GAASc,EAAAA,EAAAA,IAAa,CAAExB,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,IAC7D,EAOC,WACE,kBAAOgB,UAAWC,EAAAA,EAAAA,MAAWI,QAASV,EAAtC,mBAGA,kBACEW,GAAIX,EACJY,KAAK,OACL3B,KAAK,WACLS,MAAOT,EACP4B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,mBACZV,UAAWC,EAAAA,EAAAA,SAEb,kBAAOD,UAAWC,EAAAA,EAAAA,MAAWI,QAASP,EAAtC,oBAGA,kBACEQ,GAAIR,EACJS,KAAK,QACL3B,KAAK,YACLS,MAAOP,EACP0B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,oBACZV,UAAWC,EAAAA,EAAAA,SAEb,kBAAOD,UAAWC,EAAAA,EAAAA,MAAWI,QAASN,EAAtC,uBAGA,kBACEO,GAAIP,EACJQ,KAAK,WACL3B,KAAK,eACLS,MAAOL,EACPwB,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,uBACZV,UAAWC,EAAAA,EAAAA,QAEXT,GAKA,SAACmB,EAAAA,OAAD,KAJA,mBAAQX,UAAWC,EAAAA,EAAAA,OAAYM,KAAK,SAApC,uBAQP,ECzFD,EAFiB,kBAAM,SAAC,EAAD,GAAN,C,iCCDjB,KAAiB,C,oECAjB,IAkBIV,EAAS,WAGX,IAH0B,IAAde,EAAc,uDAAP,GACfN,EAAK,GACLO,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfN,GADEW,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOX,CACR,C","sources":["components/signUpForm/SignUp.js","pages/Register.js","components/signUpForm/SignUp.module.css","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/auth/AuthSlice';\nimport { registerUser } from 'redux/auth/AuthOperations';\nimport { Loader } from '../loader/Loader';\nimport css from './SignUp.module.css';\n\nconst RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userName':\n        setName(value);\n        break;\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(registerUser({ name: name, email: email, password: password }));\n  };\n\n  const nameId = useMemo(() => nanoid(), []);\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor={nameId}>\n        Name\n      </label>\n      <input\n        id={nameId}\n        type=\"text\"\n        name=\"userName\"\n        value={name}\n        onChange={handleChange}\n        required\n        placeholder=\"Choose your Name\"\n        className={css.input}\n      />\n      <label className={css.label} htmlFor={emailId}>\n        Email\n      </label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"userEmail\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"Choose your Email\"\n        className={css.input}\n      />\n      <label className={css.label} htmlFor={passwordId}>\n        Password\n      </label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"userPassword\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"Choose your Password\"\n        className={css.input}\n      />\n      {!isLoading ? (\n        <button className={css.button} type=\"submit\">\n          Sign Up\n        </button>\n      ) : (\n        <Loader />\n      )}\n    </form>\n  );\n};\nexport default RegisterForm;\n","import RegisterForm from 'components/signUpForm/SignUp';\n\nconst Register = () => <RegisterForm />;\n\nexport default Register;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","handleChange","e","target","value","dispatch","useDispatch","isLoading","useSelector","getAuth","nameId","useMemo","nanoid","emailId","passwordId","className","css","onSubmit","preventDefault","registerUser","htmlFor","id","type","onChange","required","placeholder","Loader","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}