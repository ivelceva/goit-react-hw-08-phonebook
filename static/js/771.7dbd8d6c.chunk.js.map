{"version":3,"file":"static/js/771.7dbd8d6c.chunk.js","mappings":"yRAuEA,EA/DkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,YACHN,EAASO,GACT,MACF,IAAK,eACHL,EAAYK,GACZ,MACF,QACEP,EAAS,IACTE,EAAY,IAEjB,EAEKM,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACE,kBAAME,UAAWC,EAAAA,EAAAA,KAAUC,SAVR,SAAAf,GACnBA,EAAEgB,iBAEFZ,GAASa,EAAAA,EAAAA,IAAU,CAAEtB,MAAOA,EAAOE,SAAUA,IAC9C,EAMC,WACE,kBAAOgB,UAAWC,EAAAA,EAAAA,MAAWI,QAAST,EAAtC,oBAGA,kBACEU,GAAIV,EACJW,KAAK,QACLlB,KAAK,YACLC,MAAOR,EACP0B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,sBAEd,kBAAOV,UAAWC,EAAAA,EAAAA,MAAWI,QAASN,EAAtC,uBAGA,kBACEO,GAAIP,EACJQ,KAAK,WACLlB,KAAK,eACLC,MAAON,EACPwB,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,wBAEZjB,GAAoD,SAACkB,EAAAA,OAAD,KAAxC,mBAAQJ,KAAK,SAAb,sBAGnB,ECjED,EAFc,kBAAM,SAAC,EAAD,GAAN,C,iCCDd,KAAiB,C,oECAjB,IAkBIT,EAAS,WAGX,IAH0B,IAAdc,EAAc,uDAAP,GACfN,EAAK,GACLO,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfN,GADEW,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOX,CACR,C","sources":["components/signInForm/SignIn.js","pages/LogIn.js","components/signUpForm/SignUp.module.css","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/auth/AuthSlice';\nimport { loginUser } from 'redux/auth/AuthOperations';\nimport { Loader } from '../loader/Loader';\nimport css from '../signUpForm/SignUp.module.css';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n        setEmail('');\n        setPassword('');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(loginUser({ email: email, password: password }));\n  };\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor={emailId}>\n        Email\n      </label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"userEmail\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"Enter your Email\"\n      />\n      <label className={css.label} htmlFor={passwordId}>\n        Password\n      </label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"userPassword\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"Enter your Password\"\n      />\n      {!isLoading ? <button type=\"submit\">Log In</button> : <Loader />}\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import  LoginForm from 'components/signInForm/SignIn';\n\nconst Login = () => <LoginForm />;\n\nexport default Login;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","className","css","onSubmit","preventDefault","loginUser","htmlFor","id","type","onChange","required","placeholder","Loader","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}