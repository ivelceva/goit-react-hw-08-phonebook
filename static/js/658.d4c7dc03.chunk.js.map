{"version":3,"file":"static/js/658.d4c7dc03.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-homework-template/./src/components/contactForm/ContactForm.module.css?fd94","components/contactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/userContact/UserContact.module.css?62d4","components/userContact/UserContact.jsx","webpack://react-homework-template/./src/components/contactList/ContactList.module.css?7e3b","components/contactList/ContactList.jsx","webpack://react-homework-template/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","components/phonebook/Phonebook.module.css","components/phonebook/Phonebook.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const getContacts = state => state.contacts.contacts;\n\nexport const getFilter = state => state.filter;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__ttXmo\"};","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from '../../redux/contactSlice';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    addNewContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  const addNewContact = (name, number) => {\n    let result = contacts.find(item => item.name === name);\n    if (result) {\n      return alert(`${name} is already in contacts`);\n    }\n    const newUser = { name, number, id: nanoid() };\n    dispatch(addContact(newUser));\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        <p>Name</p>\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"your name...\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={css.label}>\n        <p>Number</p>\n        <input\n          name=\"number\"\n          type=\"tel\"\n          placeholder=\"add valid number...\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"UserContact_contacts__7vuTu\",\"name\":\"UserContact_name__osPkg\",\"number\":\"UserContact_number__WKWk3\"};","import PropTypes from 'prop-types';\nimport css from './UserContact.module.css';\n\nconst UserContact = ({ name, number }) => {\n  return (\n    <div className={css.contacts}>\n      <p className={css.name}>{name} :</p>\n      <p className={css.number}>{number}</p>\n    </div>\n  );\n};\n\nUserContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default UserContact;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__S-drv\",\"btn\":\"ContactList_btn__Lwhwn\"};","import UserContact from '../userContact/UserContact';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { deleteContact } from '../../redux/contactSlice';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const contactSearch = contacts.filter(({ name }) => {\n      return name.toLowerCase().includes(filter.toLowerCase());\n  });\n \n  return (\n    <ul className={css.list}>\n      {contactSearch.map(({ name, number, id }) => (\n        <li className={css.user} key={id}>\n          <UserContact name={name} number={number} />\n          <button\n            className={css.btn}\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsFilter\":\"Filter_contactsFilter__3fWww\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice';\nimport { getFilter } from '../../redux/selectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = ({ target: { value } }) => {\n     dispatch(setFilter(value));\n  };\n\n  return (\n    <div className={css.contactsFilter}>\n      <label>\n        <p className={css.find}>Find contacts by name</p>\n        <input\n          className={css.input}\n          name=\"filter\"\n          type=\"text\"\n          placeholder=\"search...\"\n          value={filter}\n          onChange={handleChangeFilter}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\n","// extracted by mini-css-extract-plugin\nexport default {};","import ContactForm from 'components/contactForm/ContactForm';\nimport ContactList from 'components/contactList/ContactList';\nimport Filter from 'components/filter/Filter';\nimport css from './Phonebook.module.css';\n\nconst Phonebook = () => {\n  return (\n    <div>\n      <ContactForm />\n      <h2 className={css.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Phonebook;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getContacts","state","contacts","getFilter","filter","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","handleChange","event","target","value","addNewContact","find","item","alert","newUser","id","nanoid","addContact","className","css","onSubmit","preventDefault","type","placeholder","onChange","pattern","title","required","contactSearch","toLowerCase","includes","map","onClick","deleteContact","setFilter","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}